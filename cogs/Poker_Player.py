import discord
from discord.ext import commands
from discord import app_commands, Interaction
from discord import ui # Диалоговое окно
from discord.ui import  Button, View
from .models.MainModels import User
from .models.PokerModels import Room
from .configs import MainConfig as MC
from .embeds.MainEmbed import Embed
from .functions.MainFunction import Func
from .functions.PokerFunction import FuncP
import random

class Poker_Player(commands.GroupCog, name="покер"): # создаёт класс команд
    def __init__(self, bot: commands.Bot):
        self.bot = bot
        super().__init__()


# 0 - начать
    '''
Покер начать:
Начинает игру: 
выводит список участников: кто ходит каким, +
называет минимальную сумму для малого блайнда, +
Карты ещё НЕ выдаёт! +
Также стоит выводить общую инфу по текущей игре:
    вид покера, +
    тип ставок, +
    макс.ставку +
    и т.п.), ??????
желает приятной игры.
Пример: /покер начать
Возвращает ошибку, если:
•	Если ты не состоишь ни в одной комнате, +
•	Команду вводит не создатель комнаты (отображать создателя в командах с таким разрешением / уровнем доступа), +
•	Уже идёт игра, +
•	В комнате всего 1 человек, +
    '''
    @app_commands.command(name = "начать", description="начать игру") # balance
    async def _начало_игры(self, interaction: Interaction):
        user = User(interaction.user.id)
    # Проверяем ошибки
        Комната: str = user.Комната
        if not Комната:
            await Func.error(interaction, f'Вы не находитесь ни в одной комнате.')
            return
        room = Room(Комната)
        Создатель: int = room.Создатель
        if Создатель != interaction.user.id:
            await Func.error(interaction, f'Вы не являетесь создателем комнаты "{Комната}".\nЕё создатель: <@{Создатель}>.')
            return
        Текущий_раунд: str = room.Текущий_раунд
        if Текущий_раунд != 'не начата':
            await Func.error(interaction, f'Игра уже началась - текущий раунд: "{Текущий_раунд}".\nДождитесь окончания игры.')
            return
        Участники: list = room.Участники # список с ID участников
        if len(Участники) < 2:
            await Func.error(interaction, f'Для начала игры требуется наличие как минимум двух участников.')
            return
    # Перемешиваем порядок ходов и заносим в БД
        random.shuffle(Участники)
        room.update_field('Порядок_ходов', Участники)
        порядок_ходов = await FuncP.move_order(interaction, Участники)
        room.след_ход() # делаем +1 к следующему ходу (ходит далее первый)
        room.след_раунд('начало')
    # Выводим данные для отображения
        Тип_ставок: str = room.Тип_ставок
        Макс_ставка: int = room.Макс_ставка
        Мин_ставка: int = room.Мин_ставка
        text: str = FuncP.max_bet(Тип_ставок, Макс_ставка)
        await interaction.response.send_message(embed = Embed.комната('Вы можете начинать играть',
f"Порядок ходов:\n{порядок_ходов}\n\n\
Тип ставок: {Тип_ставок}\n\
Малый блайнд: {Мин_ставка//2}\n\
Минимальная ставка (большой блайнд): {Мин_ставка}\n\
{text}\n\
\nПриятной игры!"))


# 1 - отмена
    '''
Покер отмена:
Отменяет игру, если не сделано ещё ни одного хода. Команда нужна на тот случай, если про какого-то игрока забыли или он не успел войти, и это как раз могли заметить в списке игроков при вводе команды: /покер начать. Также, например, если кто-то передумал играть.
Пример: /покер отмена
Возвращает ошибку, если:
•	Если ты не состоишь ни в одной комнате,
•	Команду вводит не создатель комнаты??? (отображать создателя в командах с таким разрешением / уровнем доступа), 
•	Игра ещё не началась,
•	Сделано 1 и более ходов.

! можно просто ввести второй раз команду: /покер начать
    '''

# 2 - малый_блайнд
    '''
Покер малый_блайнд:
Команда для первого хода в игре. Минимальная ставка, чтобы наполнить банк. 
Отображает:
    сделанную ставку малого блайнда (она же текущий банк), 
    минимальную сумму для большого блайнда, 
    говорит, кто ставит большой блайнд (ходит вторым). 
    Выводит список участников: кто ходит каким.
Операции с БД:
у игрока отнимает монеты
В банк игры добавляет монеты,
переключает на следующий ход (большой блайнд ещё и на следующий раунд)
Пример: /покер малый_блайнд 50,
Где: 50 – сумма, обозначающая минимальный блайнд
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате, +
•	Игра ещё не началась / уже началась, +
•	Сейчас не первый ход (указывает чей сейчас ход), +
•	Сейчас не твой ход (указывает чей сейчас ход), +
•	Указанная сумма не является целым числом ИЛИ числом вообще, ИЛИ более чем в два раза меньше заданной изначально администратором суммы большого блайнда (Пусть будет фиксированной),
•	Недостаточно монет,
    '''
    @app_commands.command(name = "малый_блайнд", description="сделать первый ход") # balance
    async def _малый_блайнд(self, interaction: Interaction):
        user = User(interaction.user.id)
        Комната = user.Комната
        room = Room(Комната)
    # Проверка всех ошибок сразу
        if not await FuncP.check_error(interaction, user, room = room, блайнд = 2):
            return
    # Проверяем ошибки
        """
        if not Комната:
            await Func.error(interaction, 'Вы не находитесь ни в одной комнате.')
            return
        Текущий_раунд = room.Текущий_раунд
        if Текущий_раунд != 'начата':
            await Func.error(interaction, f'Игра ещё не началась или уже идёт. Текущий раунд: "{Текущий_раунд}".')
            return
        Текущий_ход = room.Текущий_ход
        ID_первого_игрока = room.Порядок_ходов[Текущий_ход-1]
        if interaction.user.id != ID_первого_игрока:
            await Func.error(interaction, f'Сейчас ход другого игрока: "<@{ID_первого_игрока}>".')
            return
        Баланс = user.Баланс
        Мин_ставка = room.Мин_ставка//2
        if Баланс < Мин_ставка:
            await Func.error(interaction, f'Недостаточно средств.\nУ вас: {Баланс}\nТребуется: {Мин_ставка}')
            return
        """
    # Данные для вывода текста
        Мин_ставка: int = room.Мин_ставка//2
        Тип_ставок: str = room.Тип_ставок
        Макс_ставка: int = room.Макс_ставка
        Текущий_ход: int = room.Текущий_ход
        text: str = FuncP.max_bet(Тип_ставок, Макс_ставка)
    # Операции с БД: вычитаем из баланса, добавляем денег в банк, переходим к следующему ходу
        user.добавить('Баланс', -Мин_ставка)
        room.след_ход()
        await interaction.response.send_message(embed = Embed.комната('Ставка сделана!',
f"<@{interaction.user.id}> сделал ставку: {Мин_ставка}\n\n\
Малый блайнд: {Мин_ставка//2}\n\
Минимальная ставка (большой блайнд): {Мин_ставка}\n\
{text}\n\
\nСледувющим ходит: <@{room.Порядок_ходов[Текущий_ход]}>"))
        

# 3 - большой_блайнд
    '''
Покер большой_блайнд:
Команда для второго хода в игре. Ещё одна ставка, чтобы наполнить банк. 
Выводит список участников: кто ходит каким. Отображает сделанную ставку большого блайнда, суммирует с малым – показывает банк, Раздаёт по две карты игрокам, уведомляет о том, что они могут использовать команду /покер рука – для просмотра карт в руке. Говорит, кто ходит третьим. Меняет название «начало игры» на раунд «Пре-флоп (Pre-Flop)». 
В БД делает запись о том, что началась по сути игра, раунд Пре-флоп, 
Пример: /покер большой_блайнд 50,
Где: 50 – сумма, обозначающая минимальный блайнд
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась,
•	Сейчас не второй ход (указывает чей сейчас ход), 
•	Сейчас не твой ход (указывает чей сейчас ход), 
•	Указанная сумма не является целым числом ИЛИ числом вообще, ИЛИ не больше или равна малому блайнду (заданного на первом ходе) умноженного на два,
    '''








    '''
Команды для самой игры:
*Каждая такая команда: 
•	выводит действие текущего игрока, 
•	обновляет список (очерёдность хода), 
•	отображает текущий раунд, 
•	сумму монет/фишек в банке (всего и в текущем раунде), 
•	текущую ставку,
•	большой блайнд (по идее для второго хода должна отображать ещё и малый блайнд, но для этого есть команда «/покер большой_блайнд»), 
•	если нужно – уведомляет о смене раунда, переводит деньги из банка этого раунда в общий банк,
•	показывает карты на столе. В конце игры – вызывает меню победителей.
Выдаёт ошибку, если:
•	Игра ещё не началась, 
•	Ты не состоишь ни в одной комнате,
•	Сейчас не твой ход,
    '''

# 4 - Чек
    '''
Чек (Check):
Если никто не делал ставок, игрок может пропустить ход, не вкладывая деньги в банк.
На префлопе сделать чек может только большой блайнд, и то если до этого не повышали ставку.
Пример: /покер чек
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	Сейчас не твой ход (указывает чей сейчас ход), 
•	Ещё раунд пре-флоп, а ты не большой блайнд (не ходишь вторым),
•	Ещё раунд пре-флоп, ты большой блайнд (ходишь вторым), но ставку до тебя повысили,
•	Ставку до тебя повысили,
    '''

# 5 - Колл
    '''
Колл (Call): 
Уравнивание ставки.
Пример: /покер колл
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	Сейчас не твой ход (указывает чей сейчас ход), 
•	Не хватает фишек (показывает текущий баланс, и сумму, которой не достаёт),
•	Ставку до тебя не повышали (рекомендует использовать Чек для пропуска хода или Бет для поднятия ставки),
•	
    '''

# 6 - Бет
    '''
Бет (Bet): 
– сделать первую ставку (минимум равную большому блайнду).
Пример: /покер бет 200
Где: 200 – поставленная сумма фишек
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	Сейчас не твой ход (указывает чей сейчас ход), 
•	Выбранная сумма не является целым числом ИЛИ числом вообще, ИЛИ не больше или равна большому блайнду (указывает в ответе минимально доступную ставку для бет),
•	Не хватает фишек (показывает текущий баланс, и сумму, которой не достаёт),
•	Уже был сделан Бет (сделана первая ставка), рекомендует сделать Рейз для повышения ставки, называет для него минимально допустимую сумму фишек (в два раза большую текущей ставки)
•	Аргумент не введён,
•	
    '''


# 7 - Рейз
    '''
Рейз (Raise): 
Повышение текущей ставки (больше текущей ставки как минимум в 2 раза).
Пример: /покер рейз 200
Где: 200 – поставленная сумма фишек
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	Сейчас не твой ход (указывает чей сейчас ход), 
•	Выбранная сумма не является целым числом ИЛИ числом вообще, ИЛИ не больше или равна текущей ставки в 2 раза (указывает в ответе минимально доступную ставку рейза),
•	Не хватает фишек (показывает текущий баланс, и сумму, которой не достаёт),
•	Аргумент не введён,

•	
    '''

# 8 - Фолд
    '''
Фолд (Fold): 
Сброс карт и выход из текущей раздачи. Не выгоняет из комнаты, но убирает из списка ходов, подвигая всех участников. Все поставленные деньги переходят в банк.
Проверяет, сколько участников осталось, если один – уведомляет о его победе, вызывает функцию победителя.
Пример: /покер фолд
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	Сейчас не твой ход (указывает чей сейчас ход), 
    '''

# 9 - Рука
    '''
Вспомогательные команды:
Рука:
Отображает:
•	карты, которые у тебя сейчас на руках; 
•	карты на столе для удобства просмотра комбинаций;
•	имя наилучшей комбинации и её состав; 
•	текущую ставку;
•	Банк этого раунда;
•	Общий банк;
•	Баланс твой текущий;
•	Сколько уже поставлено всего;
•	Какую сумму поставил в этом раунде;
•	Указывает, чей сейчас ход, какой у него номер;
•	Указывает твой номер хода;
Пример: /покер рука
Возвращает ошибку, если:
•	Ты не состоишь ни в одной комнате,
•	Игра ещё не началась, 
•	
    '''

# 10 - Статистика
    '''
Статистика:
Отображает статистику (свою или выбранного игрока). Желательно без пинга. Можно использовать вне игры.
Пример: /покер статистика @Джон
Возвращает ошибку, если:
•	Указано неверное айди или имя (по формату),
•	Указанного игрока нет в БД (среди всех серверов),
•	
    '''


async def setup(bot: commands.Bot) -> None:
    await bot.add_cog(Poker_Player(bot))